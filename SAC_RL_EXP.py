# -*- coding: utf-8 -*-
"""SAC_USM_summary015082021.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dkO9jeq8YQvj1qT2-Jm-qK8GoS3Ih7ow
"""




from USM_model import USM_model_exp
import numpy as np
import time
import matplotlib.pyplot as plt
#plt.style.use(['science','ieee'])

USM = USM_model_exp()


def USM_sweep(freqs,axs,T):
    USM.reset(freq=45)
    #freqs = np.concatenate((freqs,freqs[::-1]))
    states=[]
    for i in range(len(freqs)):
        freq = freqs[i]
        if i%10 == 0:
            USM.update_temp()
        states.append(USM.get_state(freq,return_all=True))
        #time.sleep(0.01)
    #print("Total time: {}".format(time.time()-start_time))    
    
    #USM.stop()
    
    states = np.array(states)
    
    axs[0].plot(freqs[:n],states[:n,2],label='Down--{}N.m'.format(str((USM.get_torque()))))
    axs[0].plot(freqs[n:],states[n:,2],label='Up--{}N.m'.format(str((USM.get_torque()))))
    axs[0].set_xlabel('Frequency [kHz]');
    axs[0].set_ylabel('Speed [rpm]');
    axs[0].set_title('Speed Hystresis [{} Vpp -- {} 째C]'.format(str((USM.get_amp())),str(int(USM.get_temp()))));
    axs[0].legend();
    
    axs[1].plot(freqs[:n],states[:n,-1],label='Down--{}N.m'.format(str((USM.get_torque()))))
    axs[1].plot(freqs[n:],states[n:,-1],label='Up--{}N.m'.format(str((USM.get_torque()))))
    axs[1].set_xlabel('Frequency [kHz]');
    axs[1].set_ylabel('Torque [N.m]');
    axs[1].set_title('Speed Hystresis [{} Vpp -- {} 째C]'.format(str((USM.get_amp())),str(int(USM.get_temp()))));
    plt.legend();
    '''
    plt.figure()
    plt.plot(freqs[:n],states[:n,2],'r',label='Down')
    plt.plot(freqs[n:],states[n:,2],'b',label='Up')
    plt.xlabel('Frequency [kHz]');
    plt.ylabel('Feedback Voltage [V]');
    plt.title('Speed Hystresis [{} Vpp -- {} 째C]'.format(str((USM.get_amp())),str(int(USM.get_temp()))));
    plt.legend();
    
    plt.figure()
    plt.plot(freqs[:n],states[:n,2]/states[:n,-1],'r',label='Down')
    plt.plot(freqs[n:],states[n:,2]/states[n:,-1],'b',label='Up')
    plt.xlabel('Frequency [kHz]');
    plt.ylabel('Ratio [rpm/V]');
    plt.title('Speed Hystresis [{} Vpp -- {} 째C]'.format(str((USM.get_amp())),str(int(USM.get_temp()))));
    plt.legend();
    '''
    return states

start_time = time.time()
states = []
freq = 45
USM.start(3,42)
n = 500
for i in range(n):
      states.append(USM.get_state(freq-(i//10)*0.1))
      #time.sleep(0.01)
  #time.sleep(10)
total_time = time.time()-start_time
print("Total Time: {} -- Mean Step Time: {}".format(total_time,total_time/n))
USM.stop()

# n = 200
# fig, axs = plt.subplots(1, 2,figsize=(16,12))
# T = 0
# freqs = 42 + 3*np.cos(np.linspace(0,1,2*n)*2*np.pi)
# USM.start(amp=2.5,freq=42)
# USM.set_torque(T)
# start_time = time.time()
# speeds = USM_sweep(freqs,axs,T)[:,3].reshape(-1,1)
# total_time = time.time()-start_time
# print("Total Time: {} -- Mean Step Time: {}".format(total_time,total_time/2/n))
# USM.stop()

# v_amp = 3
# targ_temps = np.arange(40,42,2)
# for targ_temp in targ_temps:

#     USM.set_torque(0)
#     USM.start(amp=v_amp,freq=42)
#     freqs_to = np.linspace(45,40.5,50)
#     for i in range(len(freqs_to)):
#         USM.get_state(freqs_to[i])
#     temp = USM.get_temp()
#     while temp < targ_temp:
#         time.sleep(2)
#         USM.update_temp()
#         temp = USM.get_temp()
#     fig, axs = plt.subplots(1, 2,figsize=(16,12))
#     n = 120
#     freqs = 42 + 3*np.cos(np.linspace(0,1,2*n)*2*np.pi) 
#     Speeds = freqs.reshape(-1,1)
#     for T in np.arange(0,0.85,0.1):
#         USM.start(amp=v_amp,freq=42)
#         USM.set_torque(T)
#         time.sleep(1)
        
#         start_time = time.time()
#         speeds = USM_sweep(freqs,axs,T)
#         Speeds = np.concatenate((Speeds,speeds),axis=-1)
#         print(v_amp, T, targ_temp, time.time()-start_time)
#         USM.stop()
#         time.sleep(1)

#     np.savetxt('{}v_torques_speeds_temp{}.txt'.format(int(v_amp*100),targ_temp), Speeds, delimiter=',')


# for v_amp in [4,3.5,3,2.5]:
#     for T in np.linspace(0,1,11):
#         USM.set_torque(T)
#         USM.start(amp=v_amp,freq=42)
#         freqs = np.linspace(45,freq,50)
#         for i in range(len(freqs)):
#             USM.get_state(freqs[i])
        
#         time.sleep(2)
        
#         # speeds = USM_sweep(freqs)[:,3].reshape(-1,1)
#         torques = np.linspace(0,1,200)
#         states = []
#         for i in range(len(torques)):
#             USM.set_torque(torques[i])
#             time.sleep(0.1)
#             state = USM.get_state(freqs[-1],True)
#             states.append(state)
#         USM.stop()
        
        
#         states=np.array(states)
        
#         np.savetxt('{}v_freqSweep_{}Nm.txt'.format(v_amp*100,T*10), states, delimiter=',')
    
#         plt.figure()
#         plt.plot(states[:,-2],states[:,-1])
#         plt.xlabel('Commanded Voltage')
#         plt.ylabel('Measured Torque (N.m)')
#         plt.title("{} Voltage {} kHz".format(v_amp*100,freqs[-1]))
#         plt.figure()
#         plt.plot(states[:,2])
#         plt.xlabel('Step')
#         plt.ylabel('Speed (rpm')
#         plt.title("{} Voltage {} kHz".format(v_amp*100,freqs[-1]))
    
#         time.sleep(10)

# v_amp = 3.5
# freq = 42

# USM.set_torque(0)
# USM.start(amp=v_amp,freq=42)
# freqs = np.linspace(45,freq,50)
# for i in range(len(freqs)):
#     USM.get_state(freqs[i])

# time.sleep(2)

# # speeds = USM_sweep(freqs)[:,3].reshape(-1,1)
# n = 1000
# torques = 0.5 - 0.5*np.cos(np.linspace(0,1,2*n)*2*2*np.pi )
# states = []
# start_time = time.time()
# for i in range(len(torques)):
#     USM.set_torque(torques[i])
#     state = USM.get_state(freqs[-1],True)
#     states.append(state)
# USM.stop()

# states=np.array(states)

# plt.figure()
# plt.plot(states[:,-2],states[:,-1])
# plt.plot([0,1],[0,1])

# plt.xlabel('Commanded Voltage')
# plt.ylabel('Measured Torque (N.m)')
# plt.title("{} Voltage {} kHz".format(v_amp*100,freqs[-1]))
# plt.figure()
# plt.plot(states[:,2])
# plt.xlabel('Step')
# plt.ylabel('Speed (rpm')
# plt.title("{} Voltage {} kHz".format(v_amp*100,freqs[-1]))
# print("Total time: {}".format(time.time()-start_time))    

# time.sleep(10)

# for v_amp in [4,3.5,3,2.5]:
#     for freq in [41.0,41.5,42.0]:
#         USM.set_torque(0)
#         USM.start(amp=v_amp,freq=42)
#         freqs = np.linspace(45,freq,50)
#         for i in range(len(freqs)):
#             USM.get_state(freqs[i])
        
#         time.sleep(2)
        
#         # speeds = USM_sweep(freqs)[:,3].reshape(-1,1)
#         torques = np.linspace(0,1,200)
#         states = []
#         for i in range(len(torques)):
#             USM.set_torque(torques[i])
#             time.sleep(0.1)
#             state = USM.get_state(freqs[-1],True)
#             states.append(state)
#         USM.stop()
        
        
#         states=np.array(states)
        
#         np.savetxt('{}v_torqueSweep_{}khz.txt'.format(v_amp*100,freq*10), states, delimiter=',')
    
#         plt.figure()
#         plt.plot(states[:,-2],states[:,-1])
#         plt.plot([0,1],[0,1])
    
#         plt.xlabel('Commanded Torque')
#         plt.ylabel('Measured Torque (N.m)')
#         plt.title("{} Voltage {} kHz".format(v_amp*100,freqs[-1]))
#         plt.figure()
#         plt.plot(states[:,2])
#         plt.xlabel('Step')
#         plt.ylabel('Speed (rpm')
#         plt.title("{} Voltage {} kHz".format(v_amp*100,freqs[-1]))
    
#         time.sleep(10)
